@page "/forgot-password"
@using TravelMate.Services
@using TravelMate2.Services
@using TravelMate.Models
@inject IUserUIService UserService
@inject IAdminUIService AdminService
@inject NavigationManager Navigation


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title text-center mb-4">Forgot Password</h4>

                    @if (!verificationSuccessful)
                    {
                        <EditForm Model="@userVerification" OnValidSubmit="VerifyUser">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="userVerification.UserName" placeholder="Enter your user name" />
                            </div>

                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone</label>
                                <InputText id="phone" class="form-control" @bind-Value="userVerification.PhoneNumber" placeholder="Enter your phone number" />
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="userVerification.Email" placeholder="Enter your Email" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100">Verify</button>
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="@userDetails" OnValidSubmit="UpdateUserCredentials">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText id="username" class="form-control" @bind-Value="userDetails.Username" disabled />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">New Password</label>
                                <InputText id="password" type="password" class="form-control" @bind-Value="userDetails.Password" placeholder="Enter new password" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100">Update</button>
                        </EditForm>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserVerificationModel userVerification = new UserVerificationModel();
    private UserUpdateModel userDetails = new UserUpdateModel();
    private bool verificationSuccessful = false;
    private string errorMessage = string.Empty;
    private User user = new User();

    private async Task VerifyUser()
    {
        try
        {
            var users = await AdminService.GetAllUsers();
            user = users.FirstOrDefault(u => u.Username == userVerification.UserName && u.PhoneNumber == userVerification.PhoneNumber&&u.Email==userVerification.Email);

            if (user != null)
            {
                verificationSuccessful = true;
                userDetails.UserId = user.UserId;
                userDetails.Username = user.Username; // Display the username
            }
            else
            {
                errorMessage = "Verification failed. Please check your details and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task UpdateUserCredentials()
    {
        try
        {
            // Update only the password; username is already set and should not change
            var userToUpdate = new User
                {
                    UserId = userDetails.UserId,
                    Username = userDetails.Username, // Unchanged
                    PasswordHash = userDetails.Password,  // New password
                    UserType=user.UserType,
                    Name=user.Name,
                    Address=user.Address,
                    Nationality=user.Nationality,
                    Email=user.Email,
                    PhoneNumber=user.PhoneNumber
                };
            await UserService.UpdateUser(userToUpdate.UserId, userToUpdate);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while updating your credentials: {ex.Message}";
        }
    }

    private class UserVerificationModel
    {
        public string UserName { get; set; }
        public string PhoneNumber { get; set; }
        public string Email{ get; set; }
    }

    private class UserUpdateModel
    {
        public int UserId { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
