@page "/hotels/{hotelBookingString}"
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@using TravelMateUI.Services
@using TravelMate.Models
@using TravelMateUI.Models
@using static TravelMateUI.Pages.Home
@inject NavigationManager NavigationManager
@inject ISearchUIService SearchService
@inject IWishListUIService WishListService
@inject IJSRuntime JSRuntime

<style>
    .hotel-card {
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .hotel-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

    .card-img {
        border-top-left-radius: 15px;
        border-bottom-left-radius: 15px;
        height: 100%;
        object-fit: cover;
    }

    .card-title {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .card-text {
        font-size: 1rem;
        color: #555;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #545b62;
        }

    .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1100;
        min-width: 250px;
    }

    .toast-body {
        font-size: 1rem;
    }

    .container {
        max-width: 1200px;
    }
</style>

<div class="container my-4">
    <div class="text-center mb-4">
        <h2 class="display-4">Hotels in @hotelBooking.CityName</h2>
    </div>

    @if (hotels == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else if (hotels.Count == 0)
    {
        <div class="text-center">
            <p class="lead">No hotels found in @hotelBooking.CityName.</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var hotel in hotels)
            {
                <div class="col-md-12 mb-4">
                    <div class="card hotel-card">
                        <div class="row no-gutters">
                            <div class="col-md-4">
                                <img src="@hotel.HotelImage" class="card-img" alt="@hotel.Name">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@hotel.Name</h5>
                                    <p class="card-text">@hotel.Description</p>
                                    <div class="d-flex align-items-center mb-3">
                                        <i class="fas fa-map-marker-alt text-primary mr-2"></i>
                                        <span>@hotel.City, @hotel.Country</span>
                                    </div>
                                    <div class="d-flex flex-wrap mb-3">
                                        <!-- Amenities with Font Awesome icons -->
                                        <span class="badge badge-info mr-2">
                                            <i class="fas fa-wifi"></i> WiFi
                                        </span>
                                        <span class="badge badge-info mr-2">
                                            <i class="fas fa-swimmer"></i> Pool
                                        </span>
                                        <span class="badge badge-info mr-2">
                                            <i class="fas fa-parking"></i> Parking
                                        </span>
                                        <span class="badge badge-info">
                                            <i class="fas fa-concierge-bell"></i> Service
                                        </span>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <a class="btn btn-primary" href="/rooms/@hotel.HotelId/@hotel.Name/@hotelBookingString">View Rooms</a>
                                        <button class="btn btn-secondary" @onclick="() => AddToWishList(hotel)">
                                            <i class="fas fa-heart"></i> Add to Wishlist
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="toast" id="wishlistToast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
        <strong class="mr-auto text-success">Success</strong>
        <small>Just now</small>
        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="toast-body">
        <i class="fas fa-check-circle text-success"></i> Added to Wishlist!
    </div>
</div>

@code {
    [Parameter]
    public string hotelBookingString { get; set; }
    private List<Hotel> hotels;
    private SearchModel hotelBooking { get; set; } = new SearchModel();
    private int currentUserId = 1; // Assume you get this from the authentication context

    protected override async Task OnInitializedAsync()
    {
        hotelBooking = JsonSerializer.Deserialize<SearchModel>(hotelBookingString);
        await LoadHotels();
    }

    private async Task LoadHotels()
    {
        var allHotels = await SearchService.GetAllHotels();
        hotels = allHotels.Where(h => h.City.Equals(hotelBooking.CityName, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task AddToWishList(Hotel hotel)
    {
        var wishListItem = new WishListTable
            {
                HotelId = hotel.HotelId,
                UserId = currentUserId,
                HotelImage = hotel.HotelImage,
                HotelName = hotel.Name
            };

        await WishListService.AddWishListItem(wishListItem, currentUserId);
        // Show a success message
        await JSRuntime.InvokeVoidAsync("eval", @"
            var toastEl = document.getElementById('wishlistToast');
            var toast = new bootstrap.Toast(toastEl, { delay: 3000 }); // Toast stays for 3 seconds
            toast.show();
        ");
    }
}

has context menu